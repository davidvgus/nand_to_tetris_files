// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // zero x?
    Mux16(a=x, b[0..15]=false, sel=zx, out=muxA);

    // negate x?
    Not16(in=muxA, out=muxAnot);
    Mux16(a[0..15]=false, b[0..15]=true, sel=nx,out=nxbus);
    Not16(in=nxbus, out=nxNot);
    And16(a=nxbus, b=muxAnot, out=nxAndNotMuxA);
    And16(a=nxNot, b=muxA, out=nxNotAndMuxA);
    Mux16(a=nxNotAndMuxA, b=nxAndNotMuxA, sel=nx, out=possiblyNegatedX);


    // zero y?
    Mux16(a=y, b=false, sel=zy, out=muxA2);

    // negate y?
    Not16(in=muxA2, out=muxA2not);
    Mux16(a[0..15]=false, b[0..15]=true, sel=ny,out=nybus);
    Not16(in=nybus, out=nyNot);
    And16(a=nybus, b=muxA2not, out=nyAndNotMuxA2);
    And16(a=nyNot, b=muxA2, out=nyNotAndMuxA2);
    Mux16(a=nyNotAndMuxA2, b=nyAndNotMuxA2, sel=ny,  out=possiblyNegatedY);

    //And x and y
    And16(a=possiblyNegatedX, b=possiblyNegatedY, out=anded);
    //Add x and y
    Add16(a=possiblyNegatedX, b=possiblyNegatedY, out=added);

    //choose and or add
    Mux16(a=anded, b=added, sel=f, out=addOrAnd);

    // negate
    Not16(in=addOrAnd, out=negateAnswer);
    Mux16(a=addOrAnd, b=negateAnswer, sel=no, out=out, out[15]=ng,
    out[0..7]=final1, out[8..15]=final2);

    //zr
    Or8Way(in=final1, out=zr1);
    Or8Way(in=final2, out=zr2);
    Or(a=zr1, b=zr2, out=zr3);
    Not(in=zr3, out=zr);

    //ng

}
